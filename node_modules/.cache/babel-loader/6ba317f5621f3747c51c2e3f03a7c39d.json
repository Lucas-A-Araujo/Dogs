{"ast":null,"code":"import React from 'react';\nconst types = {\n  email: {\n    regex: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    message: 'Preencha um email válido'\n  },\n  password: {\n    regex: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/,\n    message: 'A senha precisa ter 1 caracter maíusculo, 1 minúsculo e 1 digito. Com no mínimo 8 caracteres.'\n  },\n  number: {\n    regex: /^\\d+$/,\n    message: 'Utilize números apenas.'\n  }\n};\n\nconst useForm = type => {\n  const [value, setValue] = React.useState('');\n  const [error, setError] = React.useState(null);\n\n  function validate(value) {\n    if (type === false) return true;\n\n    if (value.length === 0) {\n      setError('Preencha um valor.');\n      return false;\n    } else if (types[type] && !types[type].regex.test(value)) {\n      setError(types[type].message);\n      return false;\n    } else {\n      setError(null);\n      return true;\n    }\n  }\n\n  function onChange({\n    target\n  }) {\n    if (error) validate(target.value);\n    setValue(target.value);\n  }\n\n  return {\n    value,\n    setValue,\n    onChange,\n    error,\n    validate: () => validate(value),\n    onBlur: () => validate(value)\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/lucas/node_projects/dogs-final/src/Hooks/useForm.js"],"names":["React","types","email","regex","message","password","number","useForm","type","value","setValue","useState","error","setError","validate","length","test","onChange","target","onBlur"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,uJADF;AAELC,IAAAA,OAAO,EAAE;AAFJ,GADK;AAKZC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,KAAK,EAAE,iDADC;AAERC,IAAAA,OAAO,EACL;AAHM,GALE;AAUZE,EAAAA,MAAM,EAAE;AACNH,IAAAA,KAAK,EAAE,OADD;AAENC,IAAAA,OAAO,EAAE;AAFH;AAVI,CAAd;;AAgBA,MAAMG,OAAO,GAAIC,IAAD,IAAU;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,KAAK,CAACW,QAAN,CAAe,IAAf,CAA1B;;AAEA,WAASG,QAAT,CAAkBL,KAAlB,EAAyB;AACvB,QAAID,IAAI,KAAK,KAAb,EAAoB,OAAO,IAAP;;AACpB,QAAIC,KAAK,CAACM,MAAN,KAAiB,CAArB,EAAwB;AACtBF,MAAAA,QAAQ,CAAC,oBAAD,CAAR;AACA,aAAO,KAAP;AACD,KAHD,MAGO,IAAIZ,KAAK,CAACO,IAAD,CAAL,IAAe,CAACP,KAAK,CAACO,IAAD,CAAL,CAAYL,KAAZ,CAAkBa,IAAlB,CAAuBP,KAAvB,CAApB,EAAmD;AACxDI,MAAAA,QAAQ,CAACZ,KAAK,CAACO,IAAD,CAAL,CAAYJ,OAAb,CAAR;AACA,aAAO,KAAP;AACD,KAHM,MAGA;AACLS,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,aAAO,IAAP;AACD;AACF;;AAED,WAASI,QAAT,CAAkB;AAAEC,IAAAA;AAAF,GAAlB,EAA8B;AAC5B,QAAIN,KAAJ,EAAWE,QAAQ,CAACI,MAAM,CAACT,KAAR,CAAR;AACXC,IAAAA,QAAQ,CAACQ,MAAM,CAACT,KAAR,CAAR;AACD;;AAED,SAAO;AACLA,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLO,IAAAA,QAHK;AAILL,IAAAA,KAJK;AAKLE,IAAAA,QAAQ,EAAE,MAAMA,QAAQ,CAACL,KAAD,CALnB;AAMLU,IAAAA,MAAM,EAAE,MAAML,QAAQ,CAACL,KAAD;AANjB,GAAP;AAQD,CA/BD;;AAiCA,eAAeF,OAAf","sourcesContent":["import React from 'react';\n\nconst types = {\n  email: {\n    regex: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    message: 'Preencha um email válido',\n  },\n  password: {\n    regex: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/,\n    message:\n      'A senha precisa ter 1 caracter maíusculo, 1 minúsculo e 1 digito. Com no mínimo 8 caracteres.',\n  },\n  number: {\n    regex: /^\\d+$/,\n    message: 'Utilize números apenas.',\n  },\n};\n\nconst useForm = (type) => {\n  const [value, setValue] = React.useState('');\n  const [error, setError] = React.useState(null);\n\n  function validate(value) {\n    if (type === false) return true;\n    if (value.length === 0) {\n      setError('Preencha um valor.');\n      return false;\n    } else if (types[type] && !types[type].regex.test(value)) {\n      setError(types[type].message);\n      return false;\n    } else {\n      setError(null);\n      return true;\n    }\n  }\n\n  function onChange({ target }) {\n    if (error) validate(target.value);\n    setValue(target.value);\n  }\n\n  return {\n    value,\n    setValue,\n    onChange,\n    error,\n    validate: () => validate(value),\n    onBlur: () => validate(value),\n  };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}